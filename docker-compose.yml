version: '3.7'
services:
  mongo:
    image: mongo
    networks:
      - backend    
    restart: on-failure
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - 27017:27017
    container_name: "${app_name}_${instance_id}_mongo_db"
  mongo-express:
    image: mongo-express
    networks:
      - frontend # @todo - make mongo express more secure, maybe remove from production build when done?
      - backend    
    restart: on-failure
    ports:
      - 8085:8085
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
    depends_on:
      - mongo
    container_name: "${app_name}_${instance_id}_mongo_admin"
  node_modules_container:
    image: node:alpine3.11
    user: "root"
    working_dir: /home/node/app
    environment:
      - NODE_ENV=production
    volumes:
      - nodemodules:/home/node/app/node_modules  
      - .:/home/node/app
    container_name: "${app_name}_${instance_id}_node_modules_builder"
    command: npm i    
  node_server:
    image: node:alpine3.11
    networks:
      - frontend
      - backend    
    restart: on-failure
    expose: 
      - "3666"
    user: "node"
    working_dir: /home/node/app
    environment:
      - NODE_ENV=production
    volumes:
      - ./dist/server/:/home/node/app
      - nodemodules:/home/node/app/node_modules
    depends_on:
      - mongo
      - node_modules_container
    container_name: "${app_name}_${instance_id}_node_server"
    command: sh -c "node server.js"
volumes:
  nodemodules:
    external: true
    name: ${app_name}_nodemodules_${instance_id}
networks:
  custom_network:
    external:
      name: ${app_name}_nodemodules_${instance_id}_network
   